package com.practice.recursion;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class SortArrayUsingRecursion {

    public static void main(String[] args) {
        List<Integer> list = new ArrayList<>(Arrays.asList(3, 1, 2, 5, 0, 15, 20, 100, 4, 1));
        System.out.println(list);
        sort(list);
        System.out.println(list);
    }

    // Assumption:
    // Given a sort function that takes a list of integers and sorts the list by
    // reducing the size of the list by 1 each time...
    // and ensuring the smaller list is sorted in nature
    // extra work to be done is the element that is removed from the last of the list has to be added to its correct position
    // in the assumed sorted list generated by the sort function call

    private static void sort(List<Integer> inputList) {

        // if the input list is null or empty - simply return
        if (inputList == null || inputList.isEmpty()) return;

        // extract the last element from the list and try to put it at its correct position
        int element = inputList.remove(inputList.size() - 1);

        // call sort on rest of the list
        sort(inputList);

        // now call the helper function to ensure the element gets added to its correct position
        insert(inputList, element);
    }

    private static void insert(List<Integer> inputList, int element) {

        // base case
        // if the input list is empty or the last element of the list is smaller than the extracted element
        // add the element to the end of the list and return
        if (inputList.isEmpty() || inputList.get(inputList.size() - 1) <= element) {
            inputList.add(element);
            return;
        }

        // in case the last element in the list is greater than the element to be added
        // remove the last element again and save in a temp variable
        int temp = inputList.remove(inputList.size() - 1);

        // call the sortHelper function again with the reduced list and the original element to check if it can be inserted now at the end
        insert(inputList, element);

        // finally add the removed element back to the end of the input list
        inputList.add(temp);
    }

}
